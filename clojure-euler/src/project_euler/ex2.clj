(ns project-euler.ex2
  (:require [clojure.java.io :as io]))


;;problem:
;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.



(defn fib-gen [number]
  (loop [x [1 2]]
    (if (< (last x) number)
      (recur (conj x (+ (last x) (last (butlast x)))))
      x)))

(defn even-fib-summer [number]
  (reduce + (filter even? (butlast (fib-gen number)))))

(< 1 5)(println "michaels")
(fib-gen 100)
(even-fib-summer 100)

(even-fib-summer 4000000)
